package xbuf_ext;
option optimize_for = LITE_RUNTIME;

import public "xbuf/datas.proto";

extend xbuf.Data {
  repeated AnimationKF animations_kf = 501;
}

message AnimationKF {
  ///@check identifier (id) should be unique and invariant over a set of datas (eg: use uuid) and over time.
  required string id = 1;
  /// display name
  optional string name = 2;
  // duration of the animation in seconds.
  optional float duration = 3;
  repeated Clip clips = 4;
}

message Clip {
  oneof keyframes {
    TransformKF transforms = 10;
    ColorKF colors = 11;
  }
}
message TransformKF {
  optional Vec3KF translation = 1;
  optional QuaternionKF rotation = 2;
  optional Vec3KF scale = 3;
}

message Vec3KF {
  optional KeyPoints x = 1;
  optional KeyPoints y = 2;
  optional KeyPoints z = 3;
}

message QuaternionKF {
  optional KeyPoints x = 1;
  optional KeyPoints y = 2;
  optional KeyPoints z = 3;
  optional KeyPoints w = 4;
}

message ColorKF {
  optional KeyPoints r = 1;
  optional KeyPoints g = 2;
  optional KeyPoints b = 3;
  optional KeyPoints a = 4;
}

message KeyPoints {
  enum InterpolationFct {
    constant = 1;
    linear = 2;
    bezier = 3;
  }
  repeated float duration_ratio =  1[packed=true];
  //@check length == length(duration_ratio)
  repeated float value = 2[packed=true];
  repeated InterpolationFct interpolation = 3[packed=true];
  repeated BezierParams bezier_params= 4;
}

/// Bezier Params for a curve between P0(0, yp0)  and P1(1, yp1)
/// y are in the same range that value of KeyPoints
message BezierParams {
  /// x of handle of P0 in range [0,1]
  optional float h0_x = 1;
  optional float h0_y = 2;
  /// x of handle of P1 in range [0,1]
  optional float h1_x = 3;
  optional float h1_y = 4;
}
